# -*- coding: utf-8 -*-
"""bangkit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UnPGOx9Dprj9xJtaT6EGTxqKJDcB4IGg

# Install and Import Stuff
"""

!pip install -q tflite-model-maker

import numpy as np
import os

from tflite_model_maker import model_spec
from tflite_model_maker import text_classifier
from tflite_model_maker.config import ExportFormat
from tflite_model_maker.text_classifier import AverageWordVecSpec
from tflite_model_maker.text_classifier import DataLoader

import tensorflow as tf
assert tf.__version__.startswith('2')
tf.get_logger().setLevel('ERROR')

data_dir = '/content/sample_data/'
file = os.path.join(data_dir, 'pil.csv')

file

"""# Pre-Processing"""

import pandas as pd

df = pd.read_csv(file)

df = df.dropna()

df.sample

# Remove new line (\n)

df['newline'] = df['Review'].apply(\
    lambda x : x.replace('\n', ' '))

# Remove translation

import re

df['regex'] = df['newline'].apply(\
    lambda x : re.sub(r'.*\(Diterjemahkan oleh Google\)', '', str(x)))

df['regex'] = df['regex'].apply(\
    lambda x : re.sub(r'.*\(Asli\)', '', str(x)))

# Remove number and digit
df['regex'] = df['regex'].apply(\
    lambda x : re.sub(r'\d', '', str(x)))

# df.iloc[[0,114, 115, 116], :]
df.sample(20)

!pip install PySastrawi==1.2.0

from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
 
sw = StopWordRemoverFactory().create_stop_word_remover()

# Stem

from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
stemmer = StemmerFactory().create_stemmer()

df['stemmed'] = df['regex'].apply(\
    lambda x : stemmer.stem(x))

# Remove Stopword

df['Cleaned'] = df['stemmed'].apply(\
    lambda x : sw.remove(x))

df

df. replace("", np.nan, inplace=True)
df = df.dropna(subset=['Cleaned'])

"""# 3 Variable"""

dataset = df[['Cleaned','Star']]

dataset

label_map = {1: 'Negative', 2: 'Negative', 3:'Neutral', 4:'Positive', 5:'Positive'}
dataset.replace({'Star': label_map}, inplace=True)
dataset

from sklearn.model_selection import train_test_split

train, test = train_test_split(dataset, test_size=0.2, random_state=42, shuffle=True)
train.to_csv('train.csv', index=False)
test.to_csv('test.csv', index=False)

train

test

spec = model_spec.get('average_word_vec')

train_data = DataLoader.from_csv(
      filename='train.csv',
      text_column='Cleaned',
      label_column='Star',
      model_spec=spec,
      is_training=True)
test_data = DataLoader.from_csv(
      filename='test.csv',
      text_column='Cleaned',
      label_column='Star',
      model_spec=spec,
      is_training=False)

model = text_classifier.create(train_data, model_spec=spec, epochs=10)

loss, acc = model.evaluate(test_data)

mb_spec = model_spec.get('mobilebert_classifier')

train_data = DataLoader.from_csv(
      filename='train.csv',
      text_column='Cleaned',
      label_column='Star',
      model_spec=mb_spec,
      is_training=True)
test_data = DataLoader.from_csv(
      filename='test.csv',
      text_column='Cleaned',
      label_column='Star',
      model_spec=mb_spec,
      is_training=False)

model3 = text_classifier.create(train_data, model_spec=mb_spec, epochs=3)

model3.summary()

loss, acc = model3.evaluate(test_data)

model3.export(export_dir=os.path.join(data_dir, 'bert/'), tflite_filename='3-variable.tflite')

"""# 2 Variable"""

#@title Example form fields
#@markdown Forms support many types of fields.

no_type_checking = ''  #@param
string_type = 'example'  #@param {type: "string"}
slider_value = 145  #@param {type: "slider", min: 100, max: 200}
number = 102  #@param {type: "number"}
date = '2010-11-05'  #@param {type: "date"}
pick_me = "monday"  #@param ['monday', 'tuesday', 'wednesday', 'thursday']
select_or_input = "apples" #@param ["apples", "bananas", "oranges"] {allow-input: true}
#@markdown ---

label_map = {1: 'Negative', 2: 'Negative', 3:'Positive', 4:'Positive', 5:'Positive'}
dataset = df[['Cleaned','Star']]
dataset.replace({'Star': label_map}, inplace=True)
dataset

dataset

train, test = train_test_split(dataset, test_size=0.2, random_state=42, shuffle=True)
train.to_csv('train.csv', index=False)
test.to_csv('test.csv', index=False)

mb_spec = model_spec.get('mobilebert_classifier')

train_data = DataLoader.from_csv(
      filename='train.csv',
      text_column='Cleaned',
      label_column='Star',
      model_spec=mb_spec,
      is_training=True)
test_data = DataLoader.from_csv(
      filename='test.csv',
      text_column='Cleaned',
      label_column='Star',
      model_spec=mb_spec,
      is_training=False)

model2 = text_classifier.create(train_data, model_spec=mb_spec, epochs=3)

model2.summary()

loss, acc = model2.evaluate(test_data)

model2.export(export_dir=os.path.join(data_dir, 'bert/'), tflite_filename='2-variable.tflite', )

